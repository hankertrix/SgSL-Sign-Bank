---
import type { Link, HeadingMap } from "@lib/types";
import type { MarkdownHeading } from "astro";
import { getCollection } from "astro:content";
import { makeUrlFriendlyString, alphabeticalSorter } from "@lib/utils";
import BaseLayout from "@layouts/BaseLayout.astro";
import LinkGrid from "@components/general/LinkGrid.astro";

// The interface for the item in the collection
interface Item {
	id: string;
	data: {
		title: string;
	};
}

// Get the props
const {
	title,
	collectionString,
	getHeadingFunction,
	basePath,
	depth = 2,
	sortCollectionFunction = alphabeticalSorter,
	postHeadingSortFunction = (map: HeadingMap) => map,
} = Astro.props;

// Get the collection and sort it alphabetically
const collection: Item[] = (await getCollection(collectionString)).sort(
	sortCollectionFunction,
) as Item[];

// Initialise the object to store all the headings
const headingMap: Record<string, Link[]> = {};

// Iterate over the collection and build up the categories
for (const item of collection) {
	//

	// Get the heading needed
	const heading = getHeadingFunction(item);

	// Create the link object for the heading
	const linkObject: Link = {
		title: `${item.data.title}`,
		url: `${basePath.replace(/[\/]+$/, "")}/${item.id}`,
	};

	// Get the list of links from the map
	const links = headingMap[heading];

	// If the list of links doesn't exist
	if (!links || links.length < 1) {
		//

		// Initialise the heading with the link object
		headingMap[heading] = [linkObject];
	}

	// Otherwise, add the link object to the list of links
	else {
		links.push(linkObject);
	}
}

// Sort the headings
let sortedHeadingMap: HeadingMap = new Map(Object.entries(headingMap).sort());

// Call the post heading sort function
sortedHeadingMap = postHeadingSortFunction(sortedHeadingMap);

// Create the headings
const headings: MarkdownHeading[] = [];

// Iterate over the sorted heading map
for (const heading of sortedHeadingMap.keys()) {
	//

	// Create the heading object
	const headingObject: MarkdownHeading = {
		depth: depth,
		slug: makeUrlFriendlyString(heading),
		text: heading,
	};

	// Add the heading to the list
	headings.push(headingObject);
}
---

<BaseLayout {title} {headings}>
	<div>
		<h1 class="text" id={makeUrlFriendlyString(title)}>{title}</h1>
		{
			sortedHeadingMap.entries().map(([heading, links]) => (
				<section>
					<h2 class="text" id={makeUrlFriendlyString(heading)}>
						{heading}
					</h2>
					<LinkGrid {links} />
				</section>
			))
		}
	</div>
</BaseLayout>

<style>
	div {
		display: flex;
		flex-direction: column;
		flex-grow: 1;
	}

	section {
		margin-bottom: 5em;
	}
</style>
